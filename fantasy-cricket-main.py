# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fantasy-cricket.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#Made by @namratapdr

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(788, 538)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
                MainWindow.setSizePolicy(sizePolicy)
                MainWindow.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
                MainWindow.setAutoFillBackground(False)
                MainWindow.setStyleSheet("\n""background-color: rgb(198, 255, 249);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);\n""font: 75 12pt \"Comic Sans MS\";\n""")
                self.centralwidget.setObjectName("centralwidget")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
                self.verticalLayout.setObjectName("verticalLayout")
                self.logoLabel = QtWidgets.QLabel(self.centralwidget)
                self.logoLabel.setStyleSheet("background-color: rgb(198, 255, 249);")
                self.logoLabel.setText("")
                self.logoLabel.setPixmap(QtGui.QPixmap("cultures.png"))
                self.logoLabel.setScaledContents(False)
                self.logoLabel.setObjectName("logoLabel")
                self.verticalLayout.addWidget(self.logoLabel, 0, QtCore.Qt.AlignHCenter)
                self.horizontalLayout = QtWidgets.QHBoxLayout()
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
                self.horizontalLayout_5.setObjectName("horizontalLayout_5")
                spacerItem = QtWidgets.QSpacerItem(250, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.horizontalLayout_5.addItem(spacerItem)
                self.BatLabel = QtWidgets.QLabel(self.centralwidget)
                self.BatLabel.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.BatLabel.setFont(font)
                self.BatLabel.setStyleSheet("color: rgb(0, 0, 0);\n")
                self.BatLabel.setObjectName("BatLabel")
                self.horizontalLayout_5.addWidget(self.BatLabel)
                self.batNum = QtWidgets.QLineEdit(self.centralwidget)
                self.batNum.setEnabled(False)
                self.batNum.setStyleSheet("color: rgb(0, 85, 124);")
                self.batNum.setObjectName("batNum")
                self.horizontalLayout_5.addWidget(self.batNum)
                self.bowlerLabel = QtWidgets.QLabel(self.centralwidget)
                self.bowlerLabel.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.bowlerLabel.setFont(font)
                self.bowlerLabel.setStyleSheet("color: rgb(0, 0, 0);")
                self.bowlerLabel.setObjectName("bowlerLabel")
                self.horizontalLayout_5.addWidget(self.bowlerLabel)
                self.bowlNum = QtWidgets.QLineEdit(self.centralwidget)
                self.bowlNum.setEnabled(False)
                self.bowlNum.setStyleSheet("color: rgb(0, 85, 124);")
                self.bowlNum.setObjectName("bowlNum")
                self.horizontalLayout_5.addWidget(self.bowlNum)
                self.ARLabel = QtWidgets.QLabel(self.centralwidget)
                self.ARLabel.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.ARLabel.setFont(font)
                self.ARLabel.setStyleSheet("color: rgb(0, 0, 0);\n")
                self.ARLabel.setObjectName("ARLabel")
                self.horizontalLayout_5.addWidget(self.ARLabel)
                self.ArNum = QtWidgets.QLineEdit(self.centralwidget)
                self.ArNum.setEnabled(False)
                self.ArNum.setStyleSheet("color: rgb(0, 85, 124);")
                self.ArNum.setObjectName("ArNum")
                self.horizontalLayout_5.addWidget(self.ArNum)
                self.wktLabel = QtWidgets.QLabel(self.centralwidget)
                self.wktLabel.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.wktLabel.setFont(font)
                self.wktLabel.setStyleSheet("color: rgb(0, 0, 0);")
                self.wktLabel.setObjectName("wktLabel")
                self.horizontalLayout_5.addWidget(self.wktLabel)
                self.wktNum = QtWidgets.QLineEdit(self.centralwidget)
                self.wktNum.setEnabled(False)
                self.wktNum.setStyleSheet("color: rgb(0, 85, 124);")
                self.wktNum.setObjectName("wktNum")
                self.horizontalLayout_5.addWidget(self.wktNum)
                spacerItem1 = QtWidgets.QSpacerItem(250, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.horizontalLayout_5.addItem(spacerItem1)
                self.horizontalLayout.addLayout(self.horizontalLayout_5)
                self.verticalLayout.addLayout(self.horizontalLayout)
                self.line = QtWidgets.QFrame(self.centralwidget)
                self.line.setFrameShape(QtWidgets.QFrame.HLine)
                self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line.setObjectName("line")
                self.verticalLayout.addWidget(self.line)
                self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
                self.horizontalLayout_3.setObjectName("horizontalLayout_3")
                spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.horizontalLayout_3.addItem(spacerItem2)
                self.verticalLayout_8 = QtWidgets.QVBoxLayout()
                self.verticalLayout_8.setObjectName("verticalLayout_8")
                self.category = QtWidgets.QLabel(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.category.setFont(font)
                self.category.setLayoutDirection(QtCore.Qt.LeftToRight)
                self.category.setStyleSheet("color: rgb(255, 255, 255);\n""background-color: rgb(0, 85, 124);\n""text-align: center;")
                self.category.setAlignment(QtCore.Qt.AlignCenter)
                self.category.setObjectName("category")
                self.verticalLayout_8.addWidget(self.category)
                self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
                self.groupBox.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.groupBox.setTitle("")
                self.groupBox.setFlat(False)
                self.groupBox.setCheckable(False)
                self.groupBox.setObjectName("groupBox")
                self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox)
                self.horizontalLayout_4.setContentsMargins(-1, 0, -1, 0)
                self.horizontalLayout_4.setObjectName("horizontalLayout_4")
                self.batrb = QtWidgets.QRadioButton(self.groupBox)
                self.batrb.setObjectName("batrb")
                self.horizontalLayout_4.addWidget(self.batrb)
                self.batrb.toggled.connect(self.showlist)
                self.bowlr = QtWidgets.QRadioButton(self.groupBox)
                self.bowlr.setObjectName("bowlr")
                self.horizontalLayout_4.addWidget(self.bowlr)
                self.bowlr.toggled.connect(self.showlist)
                self.arRb = QtWidgets.QRadioButton(self.groupBox)
                self.arRb.setObjectName("arRb")
                self.horizontalLayout_4.addWidget(self.arRb)
                self.arRb.toggled.connect(self.showlist)
                self.wkrb = QtWidgets.QRadioButton(self.groupBox)
                self.wkrb.setObjectName("wkrb")
                self.horizontalLayout_4.addWidget(self.wkrb)
                self.wkrb.toggled.connect(self.showlist)
                self.verticalLayout_8.addWidget(self.groupBox)
                self.availablebtn1 = QtWidgets.QPushButton(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.availablebtn1.setFont(font)
                self.availablebtn1.setStyleSheet("color: rgb(255, 255, 255);\n""background-color: rgb(0, 85, 124);")
                self.availablebtn1.setObjectName("availablebtn1")
                self.verticalLayout_8.addWidget(self.availablebtn1)
                self.list1 = QtWidgets.QListWidget(self.centralwidget)
                self.list1.setAutoFillBackground(True)
                self.list1.setStyleSheet("color: rgb(0, 0, 127);\n""background-color: rgb(255, 255, 255);\n""font: 75 12pt \"MS Shell Dlg 2\";")
                self.list1.setAutoScroll(True)
                self.list1.setObjectName("list1")
                self.verticalLayout_8.addWidget(self.list1)
                self.label_5 = QtWidgets.QLabel(self.centralwidget)
                self.label_5.setText("")
                self.label_5.setAlignment(QtCore.Qt.AlignCenter)
                self.label_5.setObjectName("label_5")
                self.verticalLayout_8.addWidget(self.label_5)
                self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
                self.horizontalLayout_2.setObjectName("horizontalLayout_2")
                self.verticalLayout_2 = QtWidgets.QVBoxLayout()
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.horizontalLayout_2.addLayout(self.verticalLayout_2)
                self.verticalLayout_8.addLayout(self.horizontalLayout_2)
                self.horizontalLayout_3.addLayout(self.verticalLayout_8)
                spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.horizontalLayout_3.addItem(spacerItem3)
                self.verticalLayout_9 = QtWidgets.QVBoxLayout()
                self.verticalLayout_9.setObjectName("verticalLayout_9")
                self.selectedplayers = QtWidgets.QLabel(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.selectedplayers.setFont(font)
                self.selectedplayers.setStyleSheet("color: rgb(255, 255, 255);\n""background-color: rgb(0, 85, 124);")
                self.selectedplayers.setAlignment(QtCore.Qt.AlignCenter)
                self.selectedplayers.setObjectName("selectedplayers")
                self.verticalLayout_9.addWidget(self.selectedplayers)
                self.teamName = QtWidgets.QLabel(self.centralwidget)
                self.teamName.setEnabled(True)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.teamName.setFont(font)
                self.teamName.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.teamName.setAlignment(QtCore.Qt.AlignCenter)
                self.teamName.setObjectName("teamName")
                self.verticalLayout_9.addWidget(self.teamName)
                self.pointsbtn2 = QtWidgets.QPushButton(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(12)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.pointsbtn2.setFont(font)
                self.pointsbtn2.setStyleSheet("color: rgb(255, 255, 255);\n""background-color: rgb(0, 85, 124);")
                self.pointsbtn2.setObjectName("pointsbtn2")
                self.verticalLayout_9.addWidget(self.pointsbtn2)
                self.line_2 = QtWidgets.QFrame(self.centralwidget)
                self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
                self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line_2.setObjectName("line_2")
                self.verticalLayout_9.addWidget(self.line_2)
                self.list2 = QtWidgets.QListWidget(self.centralwidget)
                self.list2.setStyleSheet("color: rgb(0, 0, 127);\n""font: 75 12pt \"MS Shell Dlg 2\";\n""background-color: rgb(255, 255, 255);")
                self.list2.setObjectName("list2")
                self.verticalLayout_9.addWidget(self.list2)
                #to connect list with add and remove list items function
                self.list1.itemDoubleClicked.connect(self.removelist1)
                self.list2.itemDoubleClicked.connect(self.removelist2)
                self.label_3 = QtWidgets.QLabel(self.centralwidget)
                self.label_3.setText("")
                self.label_3.setPixmap(QtGui.QPixmap("../../Users/HP/Dropbox/webdev/Learning-Python/FantasyCricket-FinalAssignment/dream1.png"))
                self.label_3.setObjectName("label_3")
                self.verticalLayout_9.addWidget(self.label_3)
                self.horizontalLayout_3.addLayout(self.verticalLayout_9)
                spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.horizontalLayout_3.addItem(spacerItem4)
                self.verticalLayout.addLayout(self.horizontalLayout_3)
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 788, 21))
                self.menubar.setObjectName("menubar")
                self.menuFile = QtWidgets.QMenu(self.menubar)
                self.menuFile.setObjectName("menuFile")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)
                self.actionNew = QtWidgets.QAction(MainWindow)
                self.actionNew.setObjectName("actionNew")
                self.actionOpen = QtWidgets.QAction(MainWindow)
                self.actionOpen.setObjectName("actionOpen")
                self.actionSave_Team = QtWidgets.QAction(MainWindow)
                self.actionSave_Team.setObjectName("actionSave_Team")
                self.actionQuit = QtWidgets.QAction(MainWindow)
                self.actionQuit.setObjectName("actionQuit")
                self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
                self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
                self.menuFile.addAction(self.actionNew)
                self.menuFile.addSeparator()
                self.menuFile.addAction(self.actionOpen)
                self.menuFile.addSeparator()
                self.menuFile.addAction(self.actionSave_Team)
                self.menuFile.addSeparator()
                self.menuFile.addAction(self.actionEVALUATE_Team)
                self.menuFile.addSeparator()
                self.bat = 0
                self.bwl = 0
                self.ar = 0
                self.wk = 0
                self.avl = 1000
                self.avlbuffer = 0
                self.used = 0
                self.menubar.addAction(self.menuFile.menuAction())
                self.menuFile.triggered[QtWidgets.QAction].connect(self.menufunction)
                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket Game"))
                self.BatLabel.setText(_translate("MainWindow", "Batsmen"))
                self.batNum.setText(_translate("MainWindow", "##"))
                self.bowlerLabel.setText(_translate("MainWindow", "Bowlers"))
                self.bowlNum.setText(_translate("MainWindow", "##"))
                self.ARLabel.setText(_translate("MainWindow", "All Rounders"))
                self.ArNum.setText(_translate("MainWindow", "##"))
                self.wktLabel.setText(_translate("MainWindow", "Wicketkeepers"))
                self.wktNum.setText(_translate("MainWindow", "##"))
                self.category.setText(_translate("MainWindow", "Player Categories"))
                self.batrb.setText(_translate("MainWindow", "BAT"))
                self.bowlr.setText(_translate("MainWindow", "BOWL"))
                self.arRb.setText(_translate("MainWindow", "AR"))
                self.wkrb.setText(_translate("MainWindow", "WK"))
                self.availablebtn1.setText(_translate("MainWindow", "Available Points : 1000"))
                self.selectedplayers.setText(_translate("MainWindow", "Selected Players"))
                self.teamName.setText(_translate("MainWindow", "Team Name"))
                self.pointsbtn2.setText(_translate("MainWindow", "Points used : "))
                self.menuFile.setTitle(_translate("MainWindow", "Manage Teams"))
                self.actionNew.setText(_translate("MainWindow", "NEW Team"))
                self.actionOpen.setText(_translate("MainWindow", "OPEN Team"))
                self.actionSave_Team.setText(_translate("MainWindow", "SAVE Team"))
                self.actionQuit.setText(_translate("MainWindow", "Quit"))
                self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))

        #shows status of players selected, points 
        def showstatus(self):
                self.batNum.setText(str(self.bat))
                self.bowlNum.setText(str(self.bwl))
                self.ArNum.setText(str(self.ar))
                self.wktNum.setText(str(self.wk))
                self.availablebtn1.setText("Available Points : {}".format(self.avl))
                self.pointsbtn2.setText("Points used : {}".format(self.used))
        #Shows items in the players list according to the categories 
        def showlist(self):
                
                if self.teamName.text()=='Team Name':
                        self.showdialog("Enter name of team ")
                        return
                if self.batrb.isChecked()==True:
                        
                        sql = "SELECT player FROM stats WHERE ctg='BAT';"
                        try:
                                self.list1.clear()
                                cursordb.execute(sql)
                                #fetchone : fetchs one record at a time
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.list2.count()):
                                                players_selected.append(self.list2.item(i).text())
                               
                                        if record[0] not in players_selected:

                                                self.list1.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
                if self.bowlr.isChecked() == True:
                        self.list1.clear()
                        sql = "SELECT player FROM stats WHERE ctg='BWL';"
                        try:
                                self.list1.clear()
                                cursordb.execute(sql)
                                #fetchone : fetchs one record at a time
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.list2.count()):
                                                players_selected.append(
                                                        self.list2.item(i).text())

                                        if record[0] not in players_selected:
                                                self.list1.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
                if self.arRb.isChecked() == True:
                        self.list1.clear()
                        sql = "SELECT player FROM stats WHERE ctg='AR';"
                        try:
                                self.list1.clear()
                                cursordb.execute(sql)
                                #fetchone : fetchs one record at a time
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.list2.count()):
                                                players_selected.append(
                                                        self.list2.item(i).text())

                                        if record[0] not in players_selected:
                                                self.list1.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
                if self.wkrb.isChecked() == True:
                        self.list1.clear()
                        sql = "SELECT player FROM stats WHERE ctg='WK';"
                        try:
                                self.list1.clear()
                                cursordb.execute(sql)
                                #fetchone : fetchs one record at a time
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.list2.count()):
                                                players_selected.append(
                                                        self.list2.item(i).text())

                                        if record[0] not in players_selected:
                                                self.list1.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
        #shows error/information messages
        def showdialog(self, msg):
                Dialog = QtWidgets.QMessageBox()
                Dialog.setIcon(QtWidgets.QMessageBox.Information)
                Dialog.setText(msg)
                Dialog.setWindowTitle("Fantasy Cricket Game")
                ret = Dialog.exec()
        #Cricket game criteria : adapting the code to specific rules of the game
        def game_criteria(self, ctgr, item):
                
                msg = ''
                if ctgr == "BAT" and self.bat >= 5:
                        msg = "Batsmen not more than 5"
                elif ctgr == "BWL" and self.bwl >= 5:
                        msg = "bowlers not more than 5"
                elif ctgr == "AR" and self.ar >= 3:
                        msg = "Allrounders not more than 3"
                elif ctgr == "WK" and self.wk >= 1:
                        msg = "Wicketkeepers not more than 1"
                
                if msg!= '':
                        self.showdialog(msg)
                        return False
                if ctgr == "BAT":
                        self.bat += 1
                if ctgr == "BWL":
                        self.bwl += 1
                if ctgr == "AR":
                        self.ar += 1
                if ctgr == "WK":
                        self.wk += 1
                cursordb = db.execute("SELECT player,value from stats where player='"+item.text()+"'")
                row = cursordb.fetchone()
                self.avlbuffer=self.avl
                self.avl = self.avl-int(row[1])
                if self.avl < 0:
                        msg = 'You cannnot add more players.\nYou have exhausted your points'
                        self.showdialog(msg)
                        self.avl=self.avlbuffer
                        return False
                self.used = self.used+int(row[1])
                return True

        #method for open team menu on the menubar widget
        def OPEN_team(self):
                sql="SELECT name from teams"
                cursor = cursordb.execute(sql)
                teams = []
                for records in cursor:
                        teams.append(records[0])
                team_name, ok = QtWidgets.QInputDialog.getItem(MainWindow, "Fantasy Cricket Game","Choose a team", teams, 0, False)
                if ok and team_name: self.teamName.setText(team_name)
                sql1 = "SELECT players, value from teams where name='"+team_name+"';"
                cursordb.execute(sql1)
                records = cursordb.fetchone()
                players = records[0].split(',')
                self.list2.addItems(players)
                self.used = records[1]
                self.avl = 1000 - records[1]
                playerNo = self.list2.count()
                for i in range(playerNo):
                        player = self.list2.item(i).text()
                        sql = "SELECT ctg from stats where player='"+player+"';"
                        cursordb.execute(sql)
                        records = cursordb.fetchone()
                        ctgr = records[0]
                        if ctgr == "BAT":
                                self.bat += 1
                        if ctgr == "BWL":
                                self.bwl += 1
                        if ctgr == "AR":
                                self.ar += 1
                        if ctgr == "WK":
                                self.wk += 1
                self.showstatus()
        #method for the menubar actions in the status bar
        def menufunction(self, action):
                txt = (action.text())
                if txt == 'NEW Team':
                        self.bat = 0
                        self.bwl = 0
                        self.ar = 0
                        self.wk = 0
                        self.avl = 1000
                        self.used = 0
                        self.list1.clear()
                        self.list2.clear()
                        self.showstatus()
                        self.teamName.setText("Team Name")
                        text,ok= QtWidgets.QInputDialog.getText(MainWindow, 'Fantasy Cricket Game', 'Enter name of Team:')
                        if ok :
                                self.teamName.setText(str(text))
                if txt == "OPEN Team":
                        self.bat = 0
                        self.bwl = 0
                        self.ar = 0
                        self.wk = 0
                        self.avl = 1000
                        self.used = 0
                        self.list1.clear()
                        self.list2.clear()
                        self.teamName.setText("Team_name")
                        self.showstatus()
                        self.OPEN_team()
                if txt == 'SAVE Team':
                        selected = ""
                        cnt = self.list2.count()
                        for i in range(cnt):
                                selected = selected+self.list2.item(i).text()
                                if i < cnt-1:
                                        selected = selected+","
                        self.SAVE_Team(self.teamName.text(), selected, self.used)
                if txt == "EVALUATE Team":
                        from fantasyCricketEvaluateTeam import Ui_EVALUATE
                        Evaluate = QtWidgets.QDialog()
                        ui = Ui_EVALUATE()
                        ui.setupUi(Evaluate)
                        ret = Evaluate.exec()

        #method for saving teams in the DB and actions for save teams in menubar
        def SAVE_Team(self,nm,string,val):
                if self.bat+self.bwl+self.ar+self.wk!=11:
                        self.showdialog("Insufficient players")
                        return
                sql="SELECT name FROM teams;"
                try:
                        #handling exceptions
                        cursordb.execute(sql)
                except:
                        self.showdialog("Error while fetching teams names.")
                while True:
                        record=cursordb.fetchone()
                        if record == None:
                                break
                        if nm in record:
                        
                                msg ="This team already exist!\nPick another team name."
                                self.showdialog(msg)
                                return
                        
                else:
                        sql="INSERT INTO teams (name, players, value) VALUES ('"+nm+"','"+string+"','"+str(val)+"');"
                        try:
                                cursordb.execute(sql)
                                db.commit()
                                self.showdialog("Team Saved successfully")
                        except:
                                self.showdialog("Error in saving teams.")
                                db.rollback()
        #method for removing items from list 1
        def removelist1(self, item):
                ctgr = ''
                if self.batrb.isChecked() == True:
                        ctgr = 'BAT'
                if self.bowlr.isChecked() == True:
                        ctgr = 'BWL'
                if self.arRb.isChecked() == True:
                        ctgr = 'AR'
                if self.wkrb.isChecked() == True:
                        ctgr = 'WK'
                ret = self.game_criteria(ctgr, item)
                if ret == True:
                        self.list1.takeItem(self.list1.row(item))
                        self.list2.addItem(item.text())
                        self.showstatus()
        #method for removing list items in list 2 i.e selected players list
        def remove_criteria(self , ctgr,item):
                players_notselected = []
                if ctgr == "BAT":
                        self.bat -= 1
                        self.batrb.setChecked(True)

                        for i in range(self.list1.count()):
                                players_notselected.append(self.list1.item(i).text())
                        if item.text() not in players_notselected:
                                self.list1.addItem(item.text())
                if ctgr == "BWL":
                        self.bwl -= 1
                        self.bowlr.setChecked(True)
                        for i in range(self.list1.count()):
                                players_notselected.append(self.list1.item(i).text())
                        if item.text() not in players_notselected:
                                self.list1.addItem(item.text())
                if ctgr == "AR":
                        self.ar -= 1
                        self.arRb.setChecked(True)
                        for i in range(self.list1.count()):
                                players_notselected.append(self.list1.item(i).text())
                        if item.text() not in players_notselected:
                                self.list1.addItem(item.text())
                if ctgr == "WK":
                        self.wk -= 1
                        self.wkrb.setChecked(True) 
                        for i in range(self.list1.count()):
                                players_notselected.append(self.list1.item(i).text())
                        if item.text() not in players_notselected:
                                self.list1.addItem(item.text())
                if self.used == 0:
                        self.bat = self.bwl = self.ar = self.wk = 0
                        self.avl = 1000
                return True
        #removes list items from selected player's list
        def removelist2(self, item):
                cursordb = ''
                self.list2.takeItem(self.list2.row(item))
                try:
                        #handling exceptions
                        cursordb = db.execute("SELECT player,value, ctg from stats where player='"+item.text()+"'")
                except:
                        self.showdialog("Error while fetching items from the Database.")
               
                row = cursordb.fetchone()
                self.avl += int(row[1])
                self.used -= int(row[1])
                ctgr = row[2]
                ret = self.remove_criteria(ctgr,item)
                if ret == True:
                        self.showstatus()


if __name__ == "__main__":
        import sys,sqlite3
        #connecting to the database
        db = sqlite3.connect("fanatasy-cricket.db")
        cursordb = db.cursor()
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
        db.close()
